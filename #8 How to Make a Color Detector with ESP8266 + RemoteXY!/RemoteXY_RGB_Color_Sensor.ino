/*
   -- New project --
   
   To compile this code using RemoteXY library 4.1.4 or later version 
   download by link http://remotexy.com/en/library/
   To connect using RemoteXY mobile app by link http://remotexy.com/en/download/                   
     - for ANDROID 4.16.02 or later version;
     - for iOS 1.13.1 or later version;
    
   To interact with the GUI, please refer to the manual: 
   https://remotexy.com/ru/help/code/interaction/

   This source code was automatically generated by the RemoteXY editor and 
   is an example for the RemoteXY library. 
   Licensed under the MIT License. See the LICENSE file in the RemoteXY library
   root (https://github.com/RemoteXY/RemoteXY-Arduino-library) for full license 
   details.             
*/

//////////////////////////////////////////////
//        RemoteXY include library          //
//////////////////////////////////////////////

// you can enable debug logging to Serial at 115200
//#define REMOTEXY__DEBUGLOG    

// RemoteXY select connection mode and include library 
#define REMOTEXY_MODE__WIFI_POINT

#include <ESP8266WiFi.h>

// RemoteXY connection settings 
#define REMOTEXY_WIFI_SSID "RemoteXY"
#define REMOTEXY_WIFI_PASSWORD ""
#define REMOTEXY_SERVER_PORT 6377


#include <RemoteXY.h>

// RemoteXY GUI configuration  
#pragma pack(push, 1)  
uint8_t RemoteXY_CONF[] =   // 26 bytes
  { 255,0,0,3,0,19,0,19,0,0,0,0,31,1,106,200,1,1,1,0,
  65,11,40,88,123,113 };
  
// this structure defines all the variables and events of your control interface 
struct {

    // output variables
  uint8_t led_01_r; // =0..255 LED Red brightness, from 0 to 255
  uint8_t led_01_g; // =0..255 LED Green brightness, from 0 to 255
  uint8_t led_01_b; // =0..255 LED Green brightness, from 0 to 255

    // other variable
  uint8_t connect_flag;  // =1 if wire connected, else =0

} RemoteXY;   
#pragma pack(pop)
 
/////////////////////////////////////////////
//           END RemoteXY include          //
/////////////////////////////////////////////

//////////////////////////////////////////////
//           Color Sensor Pins              //
//////////////////////////////////////////////

#define S0 14  // D5
#define S1 12  // D6
#define S2 13  // D7
#define S3 15  // D8
#define sensorOut 5  // D1

//////////////////////////////////////////////
//         Calibrated Min/Max Values        //
//////////////////////////////////////////////

int redMin = 377;     // 0;
int redMax = 2518;    // 0;

int greenMin = 465;   // 0;
int greenMax = 3753;  // 0;

int blueMin = 439;    // 0;
int blueMax = 3418;   // 0;

//////////////////////////////////////////////
//           Variables for Readings         //
//////////////////////////////////////////////

int redPW = 0, greenPW = 0, bluePW = 0;
int redValue = 0, greenValue = 0, blueValue = 0;

//////////////////////////////////////////////
//                Setup                     //
//////////////////////////////////////////////

void setup() {
  RemoteXY_Init();

  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);
  pinMode(sensorOut, INPUT);

  // Set frequency scaling to 100%
  digitalWrite(S0, HIGH);
  digitalWrite(S1, LOW);

}

//////////////////////////////////////////////
//                 Loop                     //
//////////////////////////////////////////////

void loop() {
  RemoteXY_Handler();

  // Read Red
  redPW = getRedPW();
  redValue = constrain(map(redPW, redMin, redMax, 1023, 0), 0, 1023);
  delay(100);

  // Read Green
  greenPW = getGreenPW();
  greenValue = constrain(map(greenPW, greenMin, greenMax, 1023, 0), 0, 1023);
  delay(100);

  // Read Blue
  bluePW = getBluePW();
  blueValue = constrain(map(bluePW, blueMin, blueMax, 1023, 0), 0, 1023);
  delay(100);

  // Send values to RemoteXY (scaled to 8-bit)
  RemoteXY.led_01_r = redValue / 4;
  RemoteXY.led_01_g = greenValue / 4;
  RemoteXY.led_01_b = blueValue / 4;

  // Output to RGB LED (Common Anode â€” invert values)
  analogWrite(4, 1023 - redValue);   // GPIO4 D2 (Red)
  analogWrite(0, 1023 - greenValue); // GPIO0 D3 (Green)
  analogWrite(2, 1023 - blueValue);  // GPIO2 D4 (Blue)

}

//////////////////////////////////////////////
//      Functions for Color Pulse Widths    //
//////////////////////////////////////////////

int getRedPW() {
  digitalWrite(S2, LOW);
  digitalWrite(S3, LOW);
  return pulseIn(sensorOut, LOW);
}

int getGreenPW() {
  digitalWrite(S2, HIGH);
  digitalWrite(S3, HIGH);
  return pulseIn(sensorOut, LOW);
}

int getBluePW() {
  digitalWrite(S2, LOW);
  digitalWrite(S3, HIGH);
  return pulseIn(sensorOut, LOW);
}
